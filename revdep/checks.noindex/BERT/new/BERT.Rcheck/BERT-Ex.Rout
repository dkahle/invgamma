
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "BERT"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('BERT')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("BERT")
> ### * BERT
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BERT
> ### Title: Adjust data using the BERT algorithm.
> ### Aliases: BERT
> 
> ### ** Examples
> 
> # generate dataset with 1000 features, 5 batches, 10 samples per batch and
> # two genotypes
> data = generate_dataset(1000,5,10,0.1, 2)
> corrected = BERT(data, cores=2)
2025-07-01 22:03:33.609867 INFO::Formatting Data.
2025-07-01 22:03:33.625117 INFO::Replacing NaNs with NAs.
2025-07-01 22:03:33.630291 INFO::Removing potential empty rows and columns
2025-07-01 22:03:33.931309 INFO::Found  5000  missing values.
2025-07-01 22:03:33.952417 INFO::Introduced 0 missing values due to singular proteins at batch/covariate level.
2025-07-01 22:03:33.95274 INFO::Done
2025-07-01 22:03:33.95292 INFO::Acquiring quality metrics before batch effect correction.
2025-07-01 22:03:33.968693 INFO::Starting hierarchical adjustment
2025-07-01 22:03:33.9691 INFO::Found  5  batches.
2025-07-01 22:03:34.064379 INFO::Set up parallel execution backend with 2 workers
2025-07-01 22:03:34.064688 INFO::Processing subtree level 1 with 5 batches using 2 cores.
2025-07-01 22:03:39.230297 INFO::Adjusting the last 2 batches sequentially
2025-07-01 22:03:39.231016 INFO::Adjusting sequential tree level 1 with 2 batches
2025-07-01 22:03:43.406972 INFO::Done
2025-07-01 22:03:43.407245 INFO::Acquiring quality metrics after batch effect correction.
2025-07-01 22:03:43.412573 INFO::ASW Batch was 0.541073106204741 prior to batch effect correction and is now -0.0623651320630383 .
2025-07-01 22:03:43.412824 INFO::ASW Label was 0.387816242848595 prior to batch effect correction and is now 0.813757610359287 .
2025-07-01 22:03:43.413155 INFO::Total function execution time is  9.82493209838867  s and adjustment time is  9.43781900405884 s ( 96.06 )
> 
> 
> 
> cleanEx()
> nameEx("compute_asw")
> ### * compute_asw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compute_asw
> ### Title: Compute the average silhouette width (ASW) for the dataset with
> ###   respect to both label and batch.
> ### Aliases: compute_asw
> 
> ### ** Examples
> 
> # generate dataset with 1000 features, 5 batches, 10 samples per batch and
> # two genotypes
> data = generate_dataset(1000,5,10,0.1, 2)
> asw = compute_asw(data)
> asw
$Label
[1] 0.3878162

$Batch
[1] 0.5410731

> 
> 
> 
> cleanEx()
> nameEx("count_existing")
> ### * count_existing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_existing
> ### Title: Count the number of numeric features in this dataset. Columns
> ###   labeled "Batch", "Sample" or "Label" will be ignored.
> ### Aliases: count_existing
> 
> ### ** Examples
> 
> # generate dataset with 1000 features, 5 batches, 10 samples per batch and
> # two genotypes
> data = generate_dataset(1000,5,10, 0.1, 2)
> count_existing(data)
[1] 45000
> 
> 
> 
> cleanEx()
> nameEx("generate_data_covariables")
> ### * generate_data_covariables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generate_data_covariables
> ### Title: Generate dataset with batch-effects and 2 classes with a
> ###   specified imbalance.
> ### Aliases: generate_data_covariables
> 
> ### ** Examples
> 
> # generate dataset with 1000 features, 5 batches, 10 samples per batch and
> # two genotypes. The class ratio will either be 7:3 or 3:7 per batch.
> data = generate_data_covariables(1000,5,10, 0.1, 0.3)
> 
> 
> 
> cleanEx()
> nameEx("generate_dataset")
> ### * generate_dataset
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generate_dataset
> ### Title: Generate dataset with batch-effects and biological labels using
> ###   a simple LS model
> ### Aliases: generate_dataset
> 
> ### ** Examples
> 
> # generate dataset with 1000 features, 5 batches, 10 samples per batch and
> # two genotypes
> data = generate_dataset(1000,5,10, 0.1, 2)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.575 0.234 9.949 6.479 0.455 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
