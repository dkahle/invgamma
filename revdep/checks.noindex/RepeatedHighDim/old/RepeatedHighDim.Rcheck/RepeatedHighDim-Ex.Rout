
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "RepeatedHighDim"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('RepeatedHighDim')

  __        __   _                            _
  \ \      / /__| | ___ ___  _ __ ___   ___  | |_ ___
   \ \ /\ / / _ \ |/ __/ _ \| '_ ` _ \ / _ \ | __/ _ \
    \ V  V /  __/ | (_| (_) | | | | | |  __/ | || (_) |
     \_/\_/ \___|_|\___\___/|_| |_| |_|\___|  \__\___/

         ____                       _           _
        |  _ \ ___ _ __   ___  __ _| |_ ___  __| |
        | |_) / _ \ '_ \ / _ \/ _` | __/ _ \/ _` |
        |  _ <  __/ |_) |  __/ (_| | ||  __/ (_| |
        |_| \_\___| .__/ \___|\__,_|\__\___|\__,_|
                  |_| _   _ _       _
                     | | | (_) __ _| |__
                     | |_| | |/ _` | '_ \
                     |  _  | | (_| | | | |
                     |_| |_|_|\__, |_| |_|  _
                        ____  _|___/       | |
                       |  _ \(_)_ __ ___   | |
                       | | | | | '_ ` _ \  |_|
                       | |_| | | | | | | |  _
                       |____/|_|_| |_| |_| (_)

    

Toolkit for analyzing high-dimensional repeated measurements,
providing functions for:
- Binary random data generation
- Differential expression analysis
- Gene-set tests
- Network meta-analysis for gene expression data
- Outlier detection
- ScRNA-seq clustering with outlier detection

This is version 2.4.0 of RepeatedHighDim.
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("GA_diagplot")
> ### * GA_diagplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GA_diagplot
> ### Title: Diagnostic plot for comparison of two correlation matrices.
> ### Aliases: GA_diagplot
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D R1 = diag(10)
> ##D X0 <- start_matrix(p=c(0.4, 0.2, 0.5, 0.15, 0.4, 0.35, 0.2, 0.25, 0.3, 0.4), k = 5000)
> ##D Xt <- iter_matrix(X0, R = diag(10), T = 10000, e.min = 0.00001)
> ##D GA_diagplot(R1, Rt = Xt$Rt, col.method = "trafficlight")
> ##D GA_diagplot(R1, Rt = Xt$Rt, col.method = "updown")
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("GlobTestMissing")
> ### * GlobTestMissing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GlobTestMissing
> ### Title: Detection of global group effect
> ### Aliases: GlobTestMissing
> 
> ### ** Examples
> 
> ### Global comparison of a set of 100 proteins between two experimental groups,
> ### where (tau * 100) percent of expression levels are missing.
> n1 = 10
> n2 = 10
> d = 100
> tau = 0.1
> X1 = t(matrix(rnorm(n1*d, 0, 1), n1, d))
> X2 = t(matrix(rnorm(n2*d, 0.1, 1), n2, d))
> X1[sample(1:(n1*d), tau * (n1*d))] = NA
> X2[sample(1:(n2*d), tau * (n2*d))] = NA
> GlobTestMissing(X1, X2, nperm=100)
$pval
[1] 0.98

> 
> 
> 
> cleanEx()
> nameEx("RHighDim")
> ### * RHighDim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RHighDim
> ### Title: Detection of global group effect
> ### Aliases: RHighDim
> 
> ### ** Examples
> 
> ### Global comparison of a set of 100 genes between two experimental groups.
> X1 = matrix(rnorm(1000, 0, 1), 10, 100)
> X2 = matrix(rnorm(1000, 0.1, 1), 10, 100)
> RHD = RHighDim(X1, X2, paired=FALSE)
> summary_RHD(RHD)
Number of Genes: 10 
Number of Samples in Group 1: 100 
Number of Samples in Group 2: 100 
Samples are Paired: FALSE 

  effect      F    df1     df2      p
1  Group 1.3401 9.9235 1928.69 0.2037
> 
> 
> 
> cleanEx()
> nameEx("bag")
> ### * bag
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bag
> ### Title: Calculates the bag
> ### Aliases: bag
> 
> ### ** Examples
> 
> ## Attention: calculation is currently time-consuming.
> 
> ## Not run: 
> ##D ## Two 3-dimensional example data sets D1 and D2
> ##D n <- 200
> ##D x1 <- rnorm(n, 0, 1)
> ##D y1 <- rnorm(n, 0, 1)
> ##D z1 <- rnorm(n, 0, 1)
> ##D D1 <- data.frame(cbind(x1, y1, z1))
> ##D x2 <- rnorm(n, 1, 1)
> ##D y2 <- rnorm(n, 1, 1)
> ##D z2 <- rnorm(n, 1, 1)
> ##D D2 <- data.frame(cbind(x2, y2, z2))
> ##D colnames(D1) <- c("x", "y", "z")
> ##D colnames(D2) <- c("x", "y", "z")
> ##D 
> ##D # Placing outliers in D1 and D2
> ##D D1[17,] = c(4, 5, 6)
> ##D D2[99,] = -c(3, 4, 5)
> ##D 
> ##D # Grid size and graphic parameters
> ##D grid.size <- 20
> ##D red <- rgb(200, 100, 100, alpha = 100, maxColorValue = 255)
> ##D blue <- rgb(100, 100, 200, alpha = 100, maxColorValue = 255)
> ##D yel <- rgb(255, 255, 102, alpha = 100, maxColorValue = 255)
> ##D white <- rgb(255, 255, 255, alpha = 100, maxColorValue = 255)
> ##D require(rgl)
> ##D material3d(color=c(red, blue, yel, white),
> ##D alpha=c(0.5, 0.5, 0.5, 0.5), smooth=FALSE, specular="black")
> ##D 
> ##D # Calucation and visualization of gemplot for D1
> ##D G <- gridfun(D1, grid.size=20)
> ##D G$H <- hldepth(D1, G, verbose=TRUE)
> ##D dm <- depmed(G)
> ##D B <- bag(D1, G)
> ##D L <- loop(D1, B, dm=dm)
> ##D bg3d(color = "gray39" )
> ##D points3d(D1[L$outliers==0,1], D1[L$outliers==0,2], D1[L$outliers==0,3], col="green")
> ##D text3d(D1[L$outliers==1,1], D1[L$outliers==1,2],D1[L$outliers==1,3],
> ##D as.character(which(L$outliers==1)), col=yel)
> ##D spheres3d(dm[1], dm[2], dm[3], col=yel, radius=0.1)
> ##D material3d(1,alpha=0.4)
> ##D gem(B$coords, B$hull, red)
> ##D gem(L$coords.loop, L$hull.loop, red)
> ##D axes3d(col="white")
> ##D 
> ##D # Calucation and visualization of gemplot for D2
> ##D G <- gridfun(D2, grid.size=20)
> ##D G$H <- hldepth(D2, G, verbose=TRUE)
> ##D dm <- depmed(G)
> ##D B <- bag(D2, G)
> ##D L <- loop(D2, B, dm=dm)
> ##D points3d(D2[L$outliers==0,1], D2[L$outliers==0,2], D2[L$outliers==0,3], col="green")
> ##D text3d(D2[L$outliers==1,1], D2[L$outliers==1,2],D2[L$outliers==1,3],
> ##D as.character(which(L$outliers==1)), col=yel)
> ##D spheres3d(dm[1], dm[2], dm[3], col=yel, radius=0.1)
> ##D gem(B$coords, B$hull, blue)
> ##D gem(L$coords.loop, L$hull.loop, blue)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("depmed")
> ### * depmed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: depmed
> ### Title: Calculates the depth median.
> ### Aliases: depmed
> 
> ### ** Examples
> 
> ## Attention: calculation is currently time-consuming.
> ## Not run: 
> ##D 
> ##D # A 3-dimensional example data set D1
> ##D n <- 200
> ##D x1 <- rnorm(n, 0, 1)
> ##D y1 <- rnorm(n, 0, 1)
> ##D z1 <- rnorm(n, 0, 1)
> ##D D1 <- data.frame(cbind(x1, y1, z1))
> ##D colnames(D1) <- c("x", "y", "z")
> ##D 
> ##D # Specification of the grid and calculation of the halfspace location depth at each grid location.
> ##D G <- gridfun(D1, grid.size=20)
> ##D G$H <- hldepth(D1, G, verbose=TRUE)
> ##D dm <- depmed(G) ## Calculation of the depth median
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("fc_ci")
> ### * fc_ci
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fc_ci
> ### Title: Calculation of adjusted confidence intervals
> ### Aliases: fc_ci
> 
> ### ** Examples
> 
> ### Artificial microarray data
> d = 1000 ### Number of genes
> n = 10 ### Sample per group
> fc = rlnorm(d, 0, 0.1)
> mu1 = rlnorm(d, 0, 1) ### Mean vector group 1
> mu2 = mu1 * fc ### Mean vector group 2
> sd1 = rnorm(d, 1, 0.2)
> sd2 = rnorm(d, 1, 0.2)
> X1 = matrix(NA, d, n) ### Expression levels group 1
> X2 = matrix(NA, d, n) ### Expression levels group 2
> for (i in 1:n) {
+   X1[,i] = rnorm(d, mu1, sd=sd1)
+   X2[,i] = rnorm(d, mu2, sd=sd2)
+ }
> X = cbind(X1, X2)
> heatmap(X)
> 
> ### Differential expression analysis with limma
> if(check_limma()){
+ group = gl(2, n)
+ design = model.matrix(~ group)
+ fit1 = limma::lmFit(X, design)
+ fit = limma::eBayes(fit1)
+ 
+ ### Calculation of confidence intervals
+ CI = fc_ci(fit=fit, alpha=0.05, method="raw")
+ head(CI)
+ CI = fc_ci(fit=fit, alpha=0.05, method="BH")
+ head(CI)
+ CI = fc_ci(fit=fit, alpha=0.05, method="BY")
+ head(CI)
+ 
+ fc_plot(CI, xlim=c(-0.5, 3), ylim=-log10(c(1, 0.0001)), updown="up")
+ fc_plot(CI, xlim=c(-3, 0.5), ylim=-log10(c(1, 0.0001)), updown="down")
+ fc_plot(CI, xlim=c(-3, 3), ylim=-log10(c(1, 0.0001)), updown="all")
+ }
> 
> 
> 
> cleanEx()
> nameEx("fc_plot")
> ### * fc_plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fc_plot
> ### Title: Volcano plot of adjusted confidence intervals
> ### Aliases: fc_plot
> 
> ### ** Examples
> 
> ### Artificial microarray data
> d = 1000 ### Number of genes
> n = 10 ### Sample per group
> fc = rlnorm(d, 0, 0.1)
> mu1 = rlnorm(d, 0, 1) ### Mean vector group 1
> mu2 = mu1 * fc ### Mean vector group 2
> sd1 = rnorm(d, 1, 0.2)
> sd2 = rnorm(d, 1, 0.2)
> X1 = matrix(NA, d, n) ### Expression levels group 1
> X2 = matrix(NA, d, n) ### Expression levels group 2
> for (i in 1:n) {
+   X1[,i] = rnorm(d, mu1, sd=sd1)
+   X2[,i] = rnorm(d, mu2, sd=sd2)
+ }
> X = cbind(X1, X2)
> heatmap(X)
> 
> ### Differential expression analysis with limma
> if(check_limma()){
+ group = gl(2, n)
+ design = model.matrix(~ group)
+ fit1 = limma::lmFit(X, design)
+ fit = limma::eBayes(fit1)
+ 
+ ### Calculation of confidence intervals
+ CI = fc_ci(fit=fit, alpha=0.05, method="raw")
+ head(CI)
+ CI = fc_ci(fit=fit, alpha=0.05, method="BH")
+ head(CI)
+ CI = fc_ci(fit=fit, alpha=0.05, method="BY")
+ head(CI)
+ 
+ fc_plot(CI, xlim=c(-0.5, 3), ylim=-log10(c(1, 0.0001)), updown="up")
+ fc_plot(CI, xlim=c(-3, 0.5), ylim=-log10(c(1, 0.0001)), updown="down")
+ fc_plot(CI, xlim=c(-3, 3), ylim=-log10(c(1, 0.0001)), updown="all")
+ }
> 
> 
> 
> cleanEx()
> nameEx("gem")
> ### * gem
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gem
> ### Title: Plots a gemstone to an interactive graphics device
> ### Aliases: gem
> 
> ### ** Examples
> 
> ## Attention: calculation is currently time-consuming.
> ## Not run: 
> ##D 
> ##D # Two 3-dimensional example data sets D1 and D2
> ##D n <- 200
> ##D x1 <- rnorm(n, 0, 1)
> ##D y1 <- rnorm(n, 0, 1)
> ##D z1 <- rnorm(n, 0, 1)
> ##D D1 <- data.frame(cbind(x1, y1, z1))
> ##D x2 <- rnorm(n, 1, 1)
> ##D y2 <- rnorm(n, 1, 1)
> ##D z2 <- rnorm(n, 1, 1)
> ##D D2 <- data.frame(cbind(x2, y2, z2))
> ##D colnames(D1) <- c("x", "y", "z")
> ##D colnames(D2) <- c("x", "y", "z")
> ##D 
> ##D # Placing outliers in D1 and D2
> ##D D1[17,] = c(4, 5, 6)
> ##D D2[99,] = -c(3, 4, 5)
> ##D 
> ##D # Grid size and graphic parameters
> ##D grid.size <- 20
> ##D red <- rgb(200, 100, 100, alpha = 100, maxColorValue = 255)
> ##D blue <- rgb(100, 100, 200, alpha = 100, maxColorValue = 255)
> ##D yel <- rgb(255, 255, 102, alpha = 100, maxColorValue = 255)
> ##D white <- rgb(255, 255, 255, alpha = 100, maxColorValue = 255)
> ##D require(rgl)
> ##D material3d(color=c(red, blue, yel, white),
> ##D alpha=c(0.5, 0.5, 0.5, 0.5), smooth=FALSE, specular="black")
> ##D 
> ##D # Calucation and visualization of gemplot for D1
> ##D G <- gridfun(D1, grid.size=20)
> ##D G$H <- hldepth(D1, G, verbose=TRUE)
> ##D dm <- depmed(G)
> ##D B <- bag(D1, G)
> ##D L <- loop(D1, B, dm=dm)
> ##D bg3d(color = "gray39" )
> ##D points3d(D1[L$outliers==0,1], D1[L$outliers==0,2], D1[L$outliers==0,3], col="green")
> ##D text3d(D1[L$outliers==1,1], D1[L$outliers==1,2], D1[L$outliers==1,3],
> ##D as.character(which(L$outliers==1)), col=yel)
> ##D spheres3d(dm[1], dm[2], dm[3], col=yel, radius=0.1)
> ##D material3d(1,alpha=0.4)
> ##D gem(B$coords, B$hull, red)
> ##D gem(L$coords.loop, L$hull.loop, red)
> ##D axes3d(col="white")
> ##D 
> ##D # Calucation and visualization of gemplot for D2
> ##D G <- gridfun(D2, grid.size=20)
> ##D G$H <- hldepth(D2, G, verbose=TRUE)
> ##D dm <- depmed(G)
> ##D B <- bag(D2, G)
> ##D L <- loop(D2, B, dm=dm)
> ##D points3d(D2[L$outliers==0,1], D2[L$outliers==0,2], D2[L$outliers==0,3], col="green")
> ##D text3d(D2[L$outliers==1,1], D2[L$outliers==1,2], D2[L$outliers==1,3],
> ##D as.character(which(L$outliers==1)), col=yel)
> ##D spheres3d(dm[1], dm[2], dm[3], col=yel, radius=0.1)
> ##D gem(B$coords, B$hull, blue)
> ##D gem(L$coords.loop, L$hull.loop, blue)
> ##D 
> ##D # Example of outlier detection with four principal components.
> ##D # Attention: calculation is currently time-consuming.
> ##D 
> ##D set.seed(123)
> ##D n <- 200
> ##D x1 <- rnorm(n, 0, 1)
> ##D x2 <- rnorm(n, 0, 1)
> ##D x3 <- rnorm(n, 0, 1)
> ##D x4 <- rnorm(n, 0, 1)
> ##D D <- data.frame(cbind(x1, x2, x3, x4))
> ##D D[67,] = c(7, 0, 0, 0)
> ##D 
> ##D date()
> ##D G = gridfun(D, 20, 4)
> ##D G$H = hldepth(D, G, verbose=TRUE)
> ##D dm = depmed(G)
> ##D B = bag(D, G)
> ##D L = loop(D, B, dm=dm)
> ##D which(L$outliers==1)
> ##D date()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("hldepth")
> ### * hldepth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hldepth
> ### Title: Calculates the halfspace location depth
> ### Aliases: hldepth
> 
> ### ** Examples
> 
> ## Attention: calculation is currently time-consuming.
> ## Not run: 
> ##D 
> ##D # A 3-dimensional example data set D1
> ##D n <- 200
> ##D x1 <- rnorm(n, 0, 1)
> ##D y1 <- rnorm(n, 0, 1)
> ##D z1 <- rnorm(n, 0, 1)
> ##D D1 <- data.frame(cbind(x1, y1, z1))
> ##D colnames(D1) <- c("x", "y", "z")
> ##D 
> ##D # Specification of the grid and calculation of the halfspace location depth at each grid location.
> ##D G <- gridfun(D1, grid.size=20)
> ##D G$H <- hldepth(D1, G, verbose=TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("iter_matrix")
> ### * iter_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: iter_matrix
> ### Title: Genetic algorithm for generating correlated binary data
> ### Aliases: iter_matrix
> 
> ### ** Examples
> 
> ### Generation of the representive matrix Xt
> X0 <- start_matrix(p = c(0.5, 0.6), k = 1000)
> Xt <- iter_matrix(X0, R = diag(2),  T = 10000,e.min = 0.00001)$Xt
Iteration: 1/10000 [                                        ]Iteration: 2/10000 [                                        ]Iteration: 3/10000 [                                        ]Iteration: 4/10000 [                                        ]Iteration: 5/10000 [                                        ]Iteration: 6/10000 [                                        ]Iteration: 7/10000 [                                        ]Iteration: 8/10000 [                                        ]Iteration: 9/10000 [                                        ]Iteration: 10/10000 [                                        ]Iteration: 11/10000 [                                        ]Iteration: 12/10000 [                                        ]Iteration: 13/10000 [                                        ]Iteration: 14/10000 [                                        ]Iteration: 15/10000 [                                        ]Iteration: 16/10000 [                                        ]Iteration: 17/10000 [                                        ]Iteration: 18/10000 [                                        ]Iteration: 19/10000 [                                        ]Iteration: 20/10000 [                                        ]Iteration: 21/10000 [                                        ]Iteration: 22/10000 [                                        ]Iteration: 23/10000 [                                        ]Iteration: 24/10000 [                                        ]Iteration: 25/10000 [                                        ]Iteration: 26/10000 [                                        ]Iteration: 27/10000 [                                        ]Iteration: 28/10000 [                                        ]Iteration: 29/10000 [                                        ]Iteration: 30/10000 [                                        ]Iteration: 31/10000 [                                        ]Iteration: 32/10000 [                                        ]Iteration: 33/10000 [                                        ]Iteration: 34/10000 [                                        ]Iteration: 35/10000 [                                        ]Iteration: 36/10000 [                                        ]Iteration: 37/10000 [                                        ]Iteration: 38/10000 [                                        ]Iteration: 39/10000 [                                        ]Iteration: 40/10000 [                                        ]Iteration: 41/10000 [                                        ]Iteration: 42/10000 [                                        ]Iteration: 43/10000 [                                        ]Iteration: 44/10000 [                                        ]Iteration: 45/10000 [                                        ]Iteration: 46/10000 [                                        ]Iteration: 47/10000 [                                        ]Iteration: 48/10000 [                                        ]Iteration: 49/10000 [                                        ]Iteration: 50/10000 [                                        ]Iteration: 51/10000 [                                        ]Iteration: 52/10000 [                                        ]Iteration: 53/10000 [                                        ]Iteration: 54/10000 [                                        ]Iteration: 55/10000 [                                        ]Iteration: 56/10000 [                                        ]Iteration: 57/10000 [                                        ]Iteration: 58/10000 [                                        ]Iteration: 59/10000 [                                        ]Iteration: 60/10000 [                                        ]Iteration: 61/10000 [                                        ]Iteration: 62/10000 [                                        ]Iteration: 63/10000 [                                        ]Iteration: 64/10000 [                                        ]Iteration: 65/10000 [                                        ]Iteration: 66/10000 [                                        ]Iteration: 67/10000 [                                        ]Iteration: 68/10000 [                                        ]Iteration: 69/10000 [                                        ]Iteration: 70/10000 [                                        ]Iteration: 71/10000 [                                        ]Iteration: 72/10000 [                                        ]Iteration: 73/10000 [                                        ]Iteration: 74/10000 [                                        ]Iteration: 75/10000 [                                        ]Iteration: 76/10000 [                                        ]Iteration: 77/10000 [                                        ]Iteration: 78/10000 [                                        ]Iteration: 79/10000 [                                        ]Iteration: 80/10000 [                                        ]Iteration: 81/10000 [                                        ]Iteration: 82/10000 [                                        ]Iteration: 83/10000 [                                        ]Iteration: 84/10000 [                                        ]Iteration: 85/10000 [                                        ]Iteration: 86/10000 [                                        ]Iteration: 87/10000 [                                        ]Iteration: 88/10000 [                                        ]Iteration: 89/10000 [                                        ]Iteration: 90/10000 [                                        ]Iteration: 91/10000 [                                        ]Iteration: 92/10000 [                                        ]Iteration: 93/10000 [                                        ]Iteration: 94/10000 [                                        ]Iteration: 95/10000 [                                        ]Iteration: 96/10000 [                                        ]Iteration: 97/10000 [                                        ]Iteration: 98/10000 [                                        ]Iteration: 99/10000 [                                        ]Iteration: 100/10000 [                                        ]Iteration: 101/10000 [                                        ]Iteration: 102/10000 [                                        ]Iteration: 103/10000 [                                        ]Iteration: 104/10000 [                                        ]Iteration: 105/10000 [                                        ]Iteration: 106/10000 [                                        ]Iteration: 107/10000 [                                        ]Iteration: 108/10000 [                                        ]Iteration: 109/10000 [                                        ]Iteration: 110/10000 [                                        ]Iteration: 111/10000 [                                        ]Iteration: 112/10000 [                                        ]Iteration: 113/10000 [                                        ]Iteration: 114/10000 [                                        ]Iteration: 115/10000 [                                        ]Iteration: 116/10000 [                                        ]Iteration: 117/10000 [                                        ]Iteration: 118/10000 [                                        ]Iteration: 119/10000 [                                        ]Iteration: 120/10000 [                                        ]Iteration: 121/10000 [                                        ]Iteration: 122/10000 [                                        ]Iteration: 123/10000 [                                        ]Iteration: 124/10000 [                                        ]Iteration: 125/10000 [                                        ]Iteration: 126/10000 [=                                       ]Iteration: 127/10000 [=                                       ]Iteration: 128/10000 [=                                       ]Iteration: 129/10000 [=                                       ]Iteration: 130/10000 [=                                       ]Iteration: 131/10000 [=                                       ]Iteration: 132/10000 [=                                       ]Iteration: 133/10000 [=                                       ]Iteration: 134/10000 [=                                       ]Iteration: 135/10000 [=                                       ]Iteration: 136/10000 [=                                       ]Iteration: 137/10000 [=                                       ]Iteration: 138/10000 [=                                       ]Iteration: 139/10000 [=                                       ]Iteration: 140/10000 [=                                       ]Iteration: 141/10000 [=                                       ]Iteration: 142/10000 [=                                       ]Iteration: 143/10000 [=                                       ]Iteration: 144/10000 [=                                       ]Iteration: 145/10000 [=                                       ]Iteration: 146/10000 [=                                       ]Iteration: 147/10000 [=                                       ]Iteration: 148/10000 [=                                       ]Iteration: 149/10000 [=                                       ]Iteration: 150/10000 [=                                       ]Iteration: 151/10000 [=                                       ]Iteration: 152/10000 [=                                       ]Iteration: 153/10000 [=                                       ]Iteration: 154/10000 [=                                       ]Iteration: 155/10000 [=                                       ]Iteration: 156/10000 [=                                       ]Iteration: 157/10000 [=                                       ]Iteration: 158/10000 [=                                       ]Iteration: 159/10000 [=                                       ]Iteration: 160/10000 [=                                       ]Iteration: 161/10000 [=                                       ]Iteration: 162/10000 [=                                       ]Iteration: 163/10000 [=                                       ]Iteration: 164/10000 [=                                       ]Iteration: 165/10000 [=                                       ]Iteration: 166/10000 [=                                       ]Iteration: 167/10000 [=                                       ]Iteration: 168/10000 [=                                       ]Iteration: 169/10000 [=                                       ]Iteration: 170/10000 [=                                       ]Iteration: 171/10000 [=                                       ]Iteration: 172/10000 [=                                       ]Iteration: 173/10000 [=                                       ]Iteration: 174/10000 [=                                       ]Iteration: 175/10000 [=                                       ]Iteration: 176/10000 [=                                       ]Iteration: 177/10000 [=                                       ]Iteration: 178/10000 [=                                       ]Iteration: 179/10000 [=                                       ]Iteration: 180/10000 [=                                       ]Iteration: 181/10000 [=                                       ]Iteration: 182/10000 [=                                       ]Iteration: 183/10000 [=                                       ]Iteration: 184/10000 [=                                       ]Iteration: 185/10000 [=                                       ]Iteration: 186/10000 [=                                       ]Iteration: 187/10000 [=                                       ]Iteration: 188/10000 [=                                       ]Iteration: 189/10000 [=                                       ]Iteration: 190/10000 [=                                       ]Iteration: 191/10000 [=                                       ]Iteration: 192/10000 [=                                       ]Iteration: 193/10000 [=                                       ]Iteration: 194/10000 [=                                       ]Iteration: 195/10000 [=                                       ]Iteration: 196/10000 [=                                       ]Iteration: 197/10000 [=                                       ]Iteration: 198/10000 [=                                       ]Iteration: 199/10000 [=                                       ]Iteration: 200/10000 [=                                       ]Iteration: 201/10000 [=                                       ]Iteration: 202/10000 [=                                       ]Iteration: 203/10000 [=                                       ]Iteration: 204/10000 [=                                       ]Iteration: 205/10000 [=                                       ]Iteration: 206/10000 [=                                       ]Iteration: 207/10000 [=                                       ]Iteration: 208/10000 [=                                       ]Iteration: 209/10000 [=                                       ]Iteration: 210/10000 [=                                       ]Iteration: 211/10000 [=                                       ]Iteration: 212/10000 [=                                       ]Iteration: 213/10000 [=                                       ]Iteration: 214/10000 [=                                       ]Iteration: 215/10000 [=                                       ]Iteration: 216/10000 [=                                       ]Iteration: 217/10000 [=                                       ]Iteration: 218/10000 [=                                       ]Iteration: 219/10000 [=                                       ]Iteration: 220/10000 [=                                       ]Iteration: 221/10000 [=                                       ]Iteration: 222/10000 [=                                       ]Iteration: 223/10000 [=                                       ]Iteration: 224/10000 [=                                       ]Iteration: 225/10000 [=                                       ]Iteration: 226/10000 [=                                       ]Iteration: 227/10000 [=                                       ]Iteration: 228/10000 [=                                       ]Iteration: 229/10000 [=                                       ]Iteration: 230/10000 [=                                       ]Iteration: 231/10000 [=                                       ]Iteration: 232/10000 [=                                       ]Iteration: 233/10000 [=                                       ]Iteration: 234/10000 [=                                       ]Iteration: 235/10000 [=                                       ]Iteration: 236/10000 [=                                       ]Iteration: 237/10000 [=                                       ]Iteration: 238/10000 [=                                       ]Iteration: 239/10000 [=                                       ]Iteration: 240/10000 [=                                       ]Iteration: 241/10000 [=                                       ]Iteration: 242/10000 [=                                       ]Iteration: 243/10000 [=                                       ]Iteration: 244/10000 [=                                       ]Iteration: 245/10000 [=                                       ]Iteration: 246/10000 [=                                       ]Iteration: 247/10000 [=                                       ]Iteration: 248/10000 [=                                       ]Iteration: 249/10000 [=                                       ]Iteration: 250/10000 [=                                       ]Iteration: 251/10000 [=                                       ]Iteration: 252/10000 [=                                       ]Iteration: 253/10000 [=                                       ]Iteration: 254/10000 [=                                       ]Iteration: 255/10000 [=                                       ]Iteration: 256/10000 [=                                       ]Iteration: 257/10000 [=                                       ]Iteration: 258/10000 [=                                       ]Iteration: 259/10000 [=                                       ]Iteration: 260/10000 [=                                       ]Iteration: 261/10000 [=                                       ]Iteration: 262/10000 [=                                       ]Iteration: 263/10000 [=                                       ]Iteration: 264/10000 [=                                       ]Iteration: 265/10000 [=                                       ]Iteration: 266/10000 [=                                       ]Iteration: 267/10000 [=                                       ]Iteration: 268/10000 [=                                       ]Iteration: 269/10000 [=                                       ]Iteration: 270/10000 [=                                       ]Iteration: 271/10000 [=                                       ]Iteration: 272/10000 [=                                       ]Iteration: 273/10000 [=                                       ]Iteration: 274/10000 [=                                       ]Iteration: 275/10000 [=                                       ]Iteration: 276/10000 [=                                       ]Iteration: 277/10000 [=                                       ]Iteration: 278/10000 [=                                       ]Iteration: 279/10000 [=                                       ]Iteration: 280/10000 [=                                       ]Iteration: 281/10000 [=                                       ]Iteration: 282/10000 [=                                       ]Iteration: 283/10000 [=                                       ]Iteration: 284/10000 [=                                       ]Iteration: 285/10000 [=                                       ]Iteration: 286/10000 [=                                       ]Iteration: 287/10000 [=                                       ]Iteration: 288/10000 [=                                       ]Iteration: 289/10000 [=                                       ]Iteration: 290/10000 [=                                       ]Iteration: 291/10000 [=                                       ]Iteration: 292/10000 [=                                       ]Iteration: 293/10000 [=                                       ]Iteration: 294/10000 [=                                       ]Iteration: 295/10000 [=                                       ]Iteration: 296/10000 [=                                       ]Iteration: 297/10000 [=                                       ]Iteration: 298/10000 [=                                       ]Iteration: 299/10000 [=                                       ]Iteration: 300/10000 [=                                       ]Iteration: 301/10000 [=                                       ]Iteration: 302/10000 [=                                       ]Iteration: 303/10000 [=                                       ]Iteration: 304/10000 [=                                       ]Iteration: 305/10000 [=                                       ]Iteration: 306/10000 [=                                       ]Iteration: 307/10000 [=                                       ]Iteration: 308/10000 [=                                       ]Iteration: 309/10000 [=                                       ]Iteration: 310/10000 [=                                       ]Iteration: 311/10000 [=                                       ]Iteration: 312/10000 [=                                       ]Iteration: 313/10000 [=                                       ]Iteration: 314/10000 [=                                       ]Iteration: 315/10000 [=                                       ]Iteration: 316/10000 [=                                       ]Iteration: 317/10000 [=                                       ]Iteration: 318/10000 [=                                       ]Iteration: 319/10000 [=                                       ]Iteration: 320/10000 [=                                       ]Iteration: 321/10000 [=                                       ]Iteration: 322/10000 [=                                       ]Iteration: 323/10000 [=                                       ]Iteration: 324/10000 [=                                       ]Iteration: 325/10000 [=                                       ]Iteration: 326/10000 [=                                       ]Iteration: 327/10000 [=                                       ]Iteration: 328/10000 [=                                       ]Iteration: 329/10000 [=                                       ]Iteration: 330/10000 [=                                       ]Iteration: 331/10000 [=                                       ]Iteration: 332/10000 [=                                       ]Iteration: 333/10000 [=                                       ]Iteration: 334/10000 [=                                       ]Iteration: 335/10000 [=                                       ]Iteration: 336/10000 [=                                       ]Iteration: 337/10000 [=                                       ]Iteration: 338/10000 [=                                       ]Iteration: 339/10000 [=                                       ]Iteration: 340/10000 [=                                       ]Iteration: 341/10000 [=                                       ]Iteration: 342/10000 [=                                       ]Iteration: 343/10000 [=                                       ]Iteration: 344/10000 [=                                       ]Iteration: 345/10000 [=                                       ]Iteration: 346/10000 [=                                       ]Iteration: 347/10000 [=                                       ]Iteration: 348/10000 [=                                       ]Iteration: 349/10000 [=                                       ]Iteration: 350/10000 [=                                       ]Iteration: 351/10000 [=                                       ]Iteration: 352/10000 [=                                       ]Iteration: 353/10000 [=                                       ]Iteration: 354/10000 [=                                       ]Iteration: 355/10000 [=                                       ]Iteration: 356/10000 [=                                       ]Iteration: 357/10000 [=                                       ]Iteration: 358/10000 [=                                       ]Iteration: 359/10000 [=                                       ]Iteration: 360/10000 [=                                       ]Iteration: 361/10000 [=                                       ]Iteration: 362/10000 [=                                       ]Iteration: 363/10000 [=                                       ]Iteration: 364/10000 [=                                       ]Iteration: 365/10000 [=                                       ]Iteration: 366/10000 [=                                       ]Iteration: 367/10000 [=                                       ]Iteration: 368/10000 [=                                       ]Iteration: 369/10000 [=                                       ]Iteration: 370/10000 [=                                       ]Iteration: 371/10000 [=                                       ]Iteration: 372/10000 [=                                       ]Iteration: 373/10000 [=                                       ]Iteration: 374/10000 [=                                       ]Iteration: 375/10000 [==                                      ]Iteration: 376/10000 [==                                      ]Iteration: 377/10000 [==                                      ]Iteration: 378/10000 [==                                      ]Iteration: 379/10000 [==                                      ]Iteration: 380/10000 [==                                      ]Iteration: 381/10000 [==                                      ]Iteration: 382/10000 [==                                      ]Iteration: 383/10000 [==                                      ]Iteration: 384/10000 [==                                      ]Iteration: 385/10000 [==                                      ]Iteration: 386/10000 [==                                      ]Iteration: 387/10000 [==                                      ]Iteration: 388/10000 [==                                      ]Iteration: 389/10000 [==                                      ]Iteration: 390/10000 [==                                      ]Iteration: 391/10000 [==                                      ]Iteration: 392/10000 [==                                      ]Iteration: 393/10000 [==                                      ]Iteration: 394/10000 [==                                      ]Iteration: 395/10000 [==                                      ]Iteration: 396/10000 [==                                      ]Iteration: 397/10000 [==                                      ]Iteration: 398/10000 [==                                      ]Iteration: 399/10000 [==                                      ]Iteration: 400/10000 [==                                      ]Iteration: 401/10000 [==                                      ]Iteration: 402/10000 [==                                      ]Iteration: 403/10000 [==                                      ]Iteration: 404/10000 [==                                      ]Iteration: 405/10000 [==                                      ]Iteration: 406/10000 [==                                      ]Iteration: 407/10000 [==                                      ]Iteration: 408/10000 [==                                      ]Iteration: 409/10000 [==                                      ]Iteration: 410/10000 [==                                      ]Iteration: 411/10000 [==                                      ]Iteration: 412/10000 [==                                      ]Iteration: 413/10000 [==                                      ]Iteration: 414/10000 [==                                      ]Iteration: 415/10000 [==                                      ]Iteration: 416/10000 [==                                      ]Iteration: 417/10000 [==                                      ]Iteration: 418/10000 [==                                      ]Iteration: 419/10000 [==                                      ]Iteration: 420/10000 [==                                      ]Iteration: 421/10000 [==                                      ]Iteration: 422/10000 [==                                      ]Iteration: 423/10000 [==                                      ]Iteration: 424/10000 [==                                      ]Iteration: 425/10000 [==                                      ]Iteration: 426/10000 [==                                      ]Iteration: 427/10000 [==                                      ]Iteration: 428/10000 [==                                      ]Iteration: 429/10000 [==                                      ]Iteration: 430/10000 [==                                      ]Iteration: 431/10000 [==                                      ]Iteration: 432/10000 [==                                      ]Iteration: 433/10000 [==                                      ]Iteration: 434/10000 [==                                      ]Iteration: 435/10000 [==                                      ]Iteration: 436/10000 [==                                      ]Iteration: 437/10000 [==                                      ]Iteration: 438/10000 [==                                      ]Iteration: 439/10000 [==                                      ]Iteration: 440/10000 [==                                      ]Iteration: 441/10000 [==                                      ]Iteration: 442/10000 [==                                      ]Iteration: 443/10000 [==                                      ]Iteration: 444/10000 [==                                      ]Iteration: 445/10000 [==                                      ]Iteration: 446/10000 [==                                      ]Iteration: 447/10000 [==                                      ]Iteration: 448/10000 [==                                      ]Iteration: 449/10000 [==                                      ]Iteration: 450/10000 [==                                      ]Iteration: 451/10000 [==                                      ]Iteration: 452/10000 [==                                      ]Iteration: 453/10000 [==                                      ]Iteration: 454/10000 [==                                      ]Iteration: 455/10000 [==                                      ]Iteration: 456/10000 [==                                      ]Iteration: 457/10000 [==                                      ]Iteration: 458/10000 [==                                      ]Iteration: 459/10000 [==                                      ]Iteration: 460/10000 [==                                      ]Iteration: 461/10000 [==                                      ]Iteration: 462/10000 [==                                      ]Iteration: 463/10000 [==                                      ]Iteration: 464/10000 [==                                      ]Iteration: 465/10000 [==                                      ]Iteration: 466/10000 [==                                      ]Iteration: 467/10000 [==                                      ]Iteration: 468/10000 [==                                      ]Iteration: 469/10000 [==                                      ]Iteration: 470/10000 [==                                      ]Iteration: 471/10000 [==                                      ]Iteration: 472/10000 [==                                      ]Iteration: 473/10000 [==                                      ]Iteration: 474/10000 [==                                      ]Iteration: 475/10000 [==                                      ]Iteration: 476/10000 [==                                      ]Iteration: 477/10000 [==                                      ]Iteration: 478/10000 [==                                      ]Iteration: 479/10000 [==                                      ]Iteration: 480/10000 [==                                      ]Iteration: 481/10000 [==                                      ]Iteration: 482/10000 [==                                      ]Iteration: 483/10000 [==                                      ]Iteration: 484/10000 [==                                      ]Iteration: 485/10000 [==                                      ]Iteration: 486/10000 [==                                      ]Iteration: 487/10000 [==                                      ]Iteration: 488/10000 [==                                      ]Iteration: 489/10000 [==                                      ]Iteration: 490/10000 [==                                      ]Iteration: 491/10000 [==                                      ]Iteration: 492/10000 [==                                      ]Iteration: 493/10000 [==                                      ]
Early stopping: RMSE fell below the threshold at iteration 493 

> 
> ### Drawing of a random sample S of size n = 10
> S <- Xt[sample(1:1000, 10, replace = TRUE),]
> 
> 
> 
> cleanEx()
> nameEx("loop")
> ### * loop
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loop
> ### Title: Calculates the fence and the loop
> ### Aliases: loop
> 
> ### ** Examples
> 
> ## Attention: calculation is currently time-consuming.
> ## Not run: 
> ##D 
> ##D # Two 3-dimensional example data sets D1 and D2
> ##D n <- 200
> ##D x1 <- rnorm(n, 0, 1)
> ##D y1 <- rnorm(n, 0, 1)
> ##D z1 <- rnorm(n, 0, 1)
> ##D D1 <- data.frame(cbind(x1, y1, z1))
> ##D x2 <- rnorm(n, 1, 1)
> ##D y2 <- rnorm(n, 1, 1)
> ##D z2 <- rnorm(n, 1, 1)
> ##D D2 <- data.frame(cbind(x2, y2, z2))
> ##D colnames(D1) <- c("x", "y", "z")
> ##D colnames(D2) <- c("x", "y", "z")
> ##D 
> ##D # Placing outliers in D1 and D2
> ##D D1[17,] = c(4, 5, 6)
> ##D D2[99,] = -c(3, 4, 5)
> ##D 
> ##D # Grid size and graphic parameters
> ##D grid.size <- 20
> ##D red <- rgb(200, 100, 100, alpha = 100, maxColorValue = 255)
> ##D blue <- rgb(100, 100, 200, alpha = 100, maxColorValue = 255)
> ##D yel <- rgb(255, 255, 102, alpha = 100, maxColorValue = 255)
> ##D white <- rgb(255, 255, 255, alpha = 100, maxColorValue = 255)
> ##D require(rgl)
> ##D material3d(color=c(red, blue, yel, white),
> ##D  alpha=c(0.5, 0.5, 0.5, 0.5), smooth=FALSE, specular="black")
> ##D 
> ##D # Calucation and visualization of gemplot for D1
> ##D G <- gridfun(D1, grid.size=20)
> ##D G$H <- hldepth(D1, G, verbose=TRUE)
> ##D dm <- depmed(G)
> ##D B <- bag(D1, G)
> ##D L <- loop(D1, B, dm=dm)
> ##D bg3d(color = "gray39" )
> ##D points3d(D1[L$outliers==0,1], D1[L$outliers==0,2], D1[L$outliers==0,3], col="green")
> ##D text3d(D1[L$outliers==1,1], D1[L$outliers==1,2], D1[L$outliers==1,3],
> ##D as.character(which(L$outliers==1)), col=yel)
> ##D spheres3d(dm[1], dm[2], dm[3], col=yel, radius=0.1)
> ##D material3d(1,alpha=0.4)
> ##D gem(B$coords, B$hull, red)
> ##D gem(L$coords.loop, L$hull.loop, red)
> ##D axes3d(col="white")
> ##D 
> ##D # Calucation and visualization of gemplot for D2
> ##D G <- gridfun(D2, grid.size=20)
> ##D G$H <- hldepth(D2, G, verbose=TRUE)
> ##D dm <- depmed(G)
> ##D B <- bag(D2, G)
> ##D L <- loop(D2, B, dm=dm)
> ##D points3d(D2[L$outliers==0,1], D2[L$outliers==0,2], D2[L$outliers==0,3], col="green")
> ##D text3d(D2[L$outliers==1,1], D2[L$outliers==1,2], D2[L$outliers==1,3],
> ##D as.character(which(L$outliers==1)), col=yel)
> ##D spheres3d(dm[1], dm[2], dm[3], col=yel, radius=0.1)
> ##D gem(B$coords, B$hull, blue)
> ##D gem(L$coords.loop, L$hull.loop, blue)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("netRNA")
> ### * netRNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: netRNA
> ### Title: netRNA:Network meta-analysis for gene expression data
> ### Aliases: netRNA
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D #'#######################
> ##D ### Data generation ###
> ##D #######################
> ##D n = 100 ### Sample size per group
> ##D G = 100 ### Number of genes
> ##D 
> ##D ### Basic expression, fold change, batch effects and error
> ##D alpha.1 = rnorm(G, 0, 1)
> ##D alpha.2 = rnorm(G, 0, 1)
> ##D beta.1 = rnorm(G, 0, 1)
> ##D beta.2 = rnorm(G, 0, 1)
> ##D gamma.1 = rnorm(G, 0, 1)
> ##D gamma.2 = rnorm(G, 2, 1)
> ##D delta.1 = sqrt(invgamma::rinvgamma(G, 1, 1))
> ##D delta.2 = sqrt(invgamma::rinvgamma(G, 1, 2))
> ##D sigma.g = rep(1, G)
> ##D 
> ##D # Generate gene names
> ##D gene_names <- paste("Gene", 1:G, sep = "")
> ##D 
> ##D ### Data matrices of control and treatment (disease) groups
> ##D C.1 = matrix(NA, G, n)
> ##D C.2 = matrix(NA, G, n)
> ##D T.1 = matrix(NA, G, n)
> ##D T.2 = matrix(NA, G, n)
> ##D 
> ##D for (j in 1:n) {
> ##D  C.1[,j] = alpha.1 + (0 * beta.1) + gamma.1 + (delta.1 * rnorm(1, 0, sigma.g))
> ##D  C.2[,j] = alpha.1 + (0 * beta.2) + gamma.2 + (delta.2 * rnorm(1, 0, sigma.g))
> ##D  T.1[,j] = alpha.2 + (1 * beta.1) + gamma.1 + (delta.1 * rnorm(1, 0, sigma.g))
> ##D  T.2[,j] = alpha.2 + (1 * beta.2) + gamma.2 + (delta.2 * rnorm(1, 0, sigma.g))
> ##D }
> ##D 
> ##D study1 = cbind(C.1, T.1)
> ##D study2 = cbind(C.2, T.2)
> ##D 
> ##D # Assign gene names to row names
> ##D #rownames(study1) <- gene_names
> ##D #rownames(study2) <- gene_names
> ##D #############################
> ##D ### Differential Analysis ###
> ##D #############################
> ##D 
> ##D if(check_limma()){
> ##D ### study1: treatment A versus control
> ##D group = gl(2, n)
> ##D M = model.matrix(~ group)
> ##D fit = limma::lmFit(study1, M)
> ##D fit = limma::eBayes(fit)
> ##D p.S1 = fit$p.value[,2]
> ##D fc.S1 = fit$coefficients[,2]
> ##D fce.S1 = sqrt(fit$s2.post) * sqrt(fit$cov.coefficients[2,2])
> ##D 
> ##D ### study2: treatment B versus control
> ##D group = gl(2, n)
> ##D M = model.matrix(~ group)
> ##D fit = limma::lmFit(study2, M)
> ##D fit = limma::eBayes(fit)
> ##D p.S2 = fit$p.value[,2]
> ##D fc.S2 = fit$coefficients[,2]
> ##D fce.S2 = sqrt(fit$s2.post) * sqrt(fit$cov.coefficients[2,2])
> ##D 
> ##D 
> ##D 
> ##D #############################
> ##D ### Network meta-analysis ###
> ##D #############################
> ##D p.net = rep(NA, G)
> ##D fc.net = rep(NA, G)
> ##D treat1 = c("uninfected", "uninfected")
> ##D treat2 = c("ZIKA", "HSV1")
> ##D studlab = c("experiment1", "experiment2")
> ##D fc.true = beta.2 - beta.1
> ##D 
> ##D TEs <- list(fc.S1, fc.S2)
> ##D seTEs <- list(fce.S1, fce.S2)
> ##D }
> ##D 
> ##D # Example usage:
> ##D test <- netRNA(TE = TEs, seTE = seTEs, treat1 = treat1, treat2 = treat2, studlab = studlab)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("rho_bounds")
> ### * rho_bounds
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rho_bounds
> ### Title: Calculate lower and upper the bounds for pairwise correlations
> ### Aliases: rho_bounds
> 
> ### ** Examples
> 
> ### A simple example
> R <- diag(4)
> p <- c(0.1, 0.2, 0.4, 0.5)
> 
> rho_bounds(R, p)
> 
> 
> 
> cleanEx()
> nameEx("rmvbinary_EP")
> ### * rmvbinary_EP
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmvbinary_EP
> ### Title: Simulating correlated binary variables using the algorithm by
> ###   Emrich and Piedmonte (1991)
> ### Aliases: rmvbinary_EP
> 
> ### ** Examples
> 
> ## Generation of a random sample
> rmvbinary_EP(n = 10, R = diag(2), p = c(0.5, 0.6))
      [,1] [,2]
 [1,]    1    1
 [2,]    1    0
 [3,]    0    1
 [4,]    0    0
 [5,]    0    1
 [6,]    0    0
 [7,]    1    1
 [8,]    0    1
 [9,]    1    0
[10,]    0    0
> 
> 
> 
> cleanEx()
> nameEx("rmvbinary_QA")
> ### * rmvbinary_QA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmvbinary_QA
> ### Title: Simulating correlated binary variables using the algorithm by
> ###   Qaqish (2003)
> ### Aliases: rmvbinary_QA
> 
> ### ** Examples
> 
> ## Generation of a random sample
> rmvbinary_QA(n = 10, R = diag(2), p = c(0.5, 0.6))
      [,1] [,2]
 [1,]    0    1
 [2,]    1    0
 [3,]    0    0
 [4,]    1    0
 [5,]    1    1
 [6,]    0    1
 [7,]    1    1
 [8,]    1    1
 [9,]    1    0
[10,]    0    0
> 
> 
> 
> cleanEx()
> nameEx("scTC_bpplot")
> ### * scTC_bpplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scTC_bpplot
> ### Title: scTC_bpplot: Post-trim breakpoint heatmap for scTrimClust
> ###   results
> ### Aliases: scTC_bpplot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D scTC_bpplot(
> ##D   covid_markers = RepeatedHighDim:::covid_markers,
> ##D   robust_covid_markers = RepeatedHighDim:::robust_covid_markers,
> ##D   robust_covid_markers_02trim = RepeatedHighDim:::robust_covid_markers_02trim,
> ##D   robust_covid_markers_03trim = RepeatedHighDim:::robust_covid_markers_03trim,
> ##D   robust_covid_data = RepeatedHighDim:::robust_covid_data,
> ##D   trim_percent_vector = c(0, 10, 20, 30, 40),
> ##D   plot_title = "CLR, nPCs:5, nFeatures:1000",
> ##D   legend_title = "Percent markers of non-trimmed"
> ##D )
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("scTC_trim_effect")
> ### * scTC_trim_effect
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scTC_trim_effect
> ### Title: scTC_trim_effect: Compare scTrimClust trimming against default
> ###   Seurat analysis
> ### Aliases: scTC_trim_effect
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D method_pairs <- list(
> ##D   CLR = list(
> ##D     data1 = RepeatedHighDim:::scTC_eff_clr,
> ##D     data2 = RepeatedHighDim:::scTC_eff_clr_robust
> ##D   ),
> ##D   LogNorm = list(
> ##D     data1 = RepeatedHighDim:::scTC_eff_log,
> ##D     data2 = RepeatedHighDim:::scTC_eff_log_robust
> ##D   )
> ##D )
> ##D 
> ##D method_colors <- setNames(grey.colors(2), c("CLR", "LogNorm"))
> ##D 
> ##D scTC_trim_effect(
> ##D   method_pairs = method_pairs,
> ##D   method_colors = method_colors,
> ##D   column_title = "nPCs:5, nFeatures:1000"
> ##D )
> ##D 
> ##D set_colors <- grey.colors(3)
> ##D names(set_colors) <- c("S1:standard", "S2:intersect", "S3:trimmed")
> ##D 
> ##D scTC_trim_effect(
> ##D   method_pairs = method_pairs,
> ##D   method_colors = method_colors,
> ##D   set_colors = setNames(c("blue", "green", "red"), names(set_colors)),
> ##D   heatmap_color_palette = colorRamp2(c(0, 50, 100), c("white", "pink", "purple")),
> ##D   column_title = "Custom Color Example"
> ##D )
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("scTrimClust")
> ### * scTrimClust
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scTrimClust
> ### Title: scTrimClust: Cluster visualization with alpha hull-based outlier
> ###   detection
> ### Aliases: scTrimClust
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D scTrimClust(RepeatedHighDim:::seurat_obj,reduction = 'tsne',
> ##D group.by = 'CellType',
> ##D hull.alpha = 2,
> ##D remove.outliers = FALSE,
> ##D outlier.quantile = 0.2,
> ##D outlier.alpha = 0.3,
> ##D outlier.color = "red",
> ##D pt.size = 5,
> ##D outline.color = "black",
> ##D outline.outliers = TRUE)
> ##D 
> ##D # second example with custom outlier col per cluster
> ##D 
> ##D scTrimClust(RepeatedHighDim:::seurat_obj,reduction = 'tsne',
> ##D group.by = 'CellType',
> ##D hull.alpha = 2,
> ##D remove.outliers = FALSE,
> ##D outlier.quantile = 0.2,
> ##D outlier.alpha = 0.3,
> ##D outlier.colors = c('TypeA'="black",
> ##D 'TypeB'='violet','TypeC' ='pink'),
> ##D pt.size = 5,
> ##D outline.color = "black",
> ##D outline.outliers = TRUE)$plot
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("sequence_probs")
> ### * sequence_probs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sequence_probs
> ### Title: Calculation of probabilities for binary sequences
> ### Aliases: sequence_probs
> 
> ### ** Examples
> 
> ### Generation of the representive matrix Xt
> X0 <- start_matrix(p = c(0.5, 0.6), k = 1000)
> Xt <- iter_matrix(X0, R = diag(2), T = 10000, e.min = 0.00001)$Xt
Iteration: 1/10000 [                                        ]Iteration: 2/10000 [                                        ]Iteration: 3/10000 [                                        ]Iteration: 4/10000 [                                        ]Iteration: 5/10000 [                                        ]Iteration: 6/10000 [                                        ]Iteration: 7/10000 [                                        ]Iteration: 8/10000 [                                        ]Iteration: 9/10000 [                                        ]Iteration: 10/10000 [                                        ]Iteration: 11/10000 [                                        ]Iteration: 12/10000 [                                        ]Iteration: 13/10000 [                                        ]Iteration: 14/10000 [                                        ]Iteration: 15/10000 [                                        ]Iteration: 16/10000 [                                        ]Iteration: 17/10000 [                                        ]Iteration: 18/10000 [                                        ]Iteration: 19/10000 [                                        ]Iteration: 20/10000 [                                        ]Iteration: 21/10000 [                                        ]Iteration: 22/10000 [                                        ]Iteration: 23/10000 [                                        ]Iteration: 24/10000 [                                        ]Iteration: 25/10000 [                                        ]Iteration: 26/10000 [                                        ]Iteration: 27/10000 [                                        ]Iteration: 28/10000 [                                        ]Iteration: 29/10000 [                                        ]Iteration: 30/10000 [                                        ]Iteration: 31/10000 [                                        ]Iteration: 32/10000 [                                        ]Iteration: 33/10000 [                                        ]Iteration: 34/10000 [                                        ]Iteration: 35/10000 [                                        ]Iteration: 36/10000 [                                        ]Iteration: 37/10000 [                                        ]Iteration: 38/10000 [                                        ]Iteration: 39/10000 [                                        ]Iteration: 40/10000 [                                        ]Iteration: 41/10000 [                                        ]Iteration: 42/10000 [                                        ]Iteration: 43/10000 [                                        ]Iteration: 44/10000 [                                        ]Iteration: 45/10000 [                                        ]Iteration: 46/10000 [                                        ]Iteration: 47/10000 [                                        ]Iteration: 48/10000 [                                        ]Iteration: 49/10000 [                                        ]Iteration: 50/10000 [                                        ]Iteration: 51/10000 [                                        ]Iteration: 52/10000 [                                        ]Iteration: 53/10000 [                                        ]Iteration: 54/10000 [                                        ]Iteration: 55/10000 [                                        ]Iteration: 56/10000 [                                        ]Iteration: 57/10000 [                                        ]Iteration: 58/10000 [                                        ]Iteration: 59/10000 [                                        ]Iteration: 60/10000 [                                        ]Iteration: 61/10000 [                                        ]Iteration: 62/10000 [                                        ]Iteration: 63/10000 [                                        ]Iteration: 64/10000 [                                        ]Iteration: 65/10000 [                                        ]Iteration: 66/10000 [                                        ]Iteration: 67/10000 [                                        ]Iteration: 68/10000 [                                        ]Iteration: 69/10000 [                                        ]Iteration: 70/10000 [                                        ]Iteration: 71/10000 [                                        ]Iteration: 72/10000 [                                        ]Iteration: 73/10000 [                                        ]Iteration: 74/10000 [                                        ]Iteration: 75/10000 [                                        ]Iteration: 76/10000 [                                        ]Iteration: 77/10000 [                                        ]Iteration: 78/10000 [                                        ]Iteration: 79/10000 [                                        ]Iteration: 80/10000 [                                        ]Iteration: 81/10000 [                                        ]Iteration: 82/10000 [                                        ]Iteration: 83/10000 [                                        ]Iteration: 84/10000 [                                        ]Iteration: 85/10000 [                                        ]Iteration: 86/10000 [                                        ]Iteration: 87/10000 [                                        ]Iteration: 88/10000 [                                        ]Iteration: 89/10000 [                                        ]Iteration: 90/10000 [                                        ]Iteration: 91/10000 [                                        ]Iteration: 92/10000 [                                        ]Iteration: 93/10000 [                                        ]Iteration: 94/10000 [                                        ]Iteration: 95/10000 [                                        ]Iteration: 96/10000 [                                        ]Iteration: 97/10000 [                                        ]Iteration: 98/10000 [                                        ]Iteration: 99/10000 [                                        ]Iteration: 100/10000 [                                        ]Iteration: 101/10000 [                                        ]Iteration: 102/10000 [                                        ]Iteration: 103/10000 [                                        ]Iteration: 104/10000 [                                        ]Iteration: 105/10000 [                                        ]Iteration: 106/10000 [                                        ]Iteration: 107/10000 [                                        ]Iteration: 108/10000 [                                        ]Iteration: 109/10000 [                                        ]Iteration: 110/10000 [                                        ]Iteration: 111/10000 [                                        ]Iteration: 112/10000 [                                        ]Iteration: 113/10000 [                                        ]Iteration: 114/10000 [                                        ]Iteration: 115/10000 [                                        ]Iteration: 116/10000 [                                        ]Iteration: 117/10000 [                                        ]Iteration: 118/10000 [                                        ]Iteration: 119/10000 [                                        ]Iteration: 120/10000 [                                        ]Iteration: 121/10000 [                                        ]Iteration: 122/10000 [                                        ]Iteration: 123/10000 [                                        ]Iteration: 124/10000 [                                        ]Iteration: 125/10000 [                                        ]Iteration: 126/10000 [=                                       ]Iteration: 127/10000 [=                                       ]Iteration: 128/10000 [=                                       ]Iteration: 129/10000 [=                                       ]Iteration: 130/10000 [=                                       ]Iteration: 131/10000 [=                                       ]Iteration: 132/10000 [=                                       ]Iteration: 133/10000 [=                                       ]Iteration: 134/10000 [=                                       ]Iteration: 135/10000 [=                                       ]Iteration: 136/10000 [=                                       ]Iteration: 137/10000 [=                                       ]Iteration: 138/10000 [=                                       ]Iteration: 139/10000 [=                                       ]Iteration: 140/10000 [=                                       ]Iteration: 141/10000 [=                                       ]Iteration: 142/10000 [=                                       ]Iteration: 143/10000 [=                                       ]Iteration: 144/10000 [=                                       ]Iteration: 145/10000 [=                                       ]Iteration: 146/10000 [=                                       ]Iteration: 147/10000 [=                                       ]Iteration: 148/10000 [=                                       ]Iteration: 149/10000 [=                                       ]Iteration: 150/10000 [=                                       ]Iteration: 151/10000 [=                                       ]Iteration: 152/10000 [=                                       ]Iteration: 153/10000 [=                                       ]Iteration: 154/10000 [=                                       ]Iteration: 155/10000 [=                                       ]Iteration: 156/10000 [=                                       ]Iteration: 157/10000 [=                                       ]Iteration: 158/10000 [=                                       ]Iteration: 159/10000 [=                                       ]Iteration: 160/10000 [=                                       ]Iteration: 161/10000 [=                                       ]Iteration: 162/10000 [=                                       ]Iteration: 163/10000 [=                                       ]Iteration: 164/10000 [=                                       ]Iteration: 165/10000 [=                                       ]Iteration: 166/10000 [=                                       ]Iteration: 167/10000 [=                                       ]Iteration: 168/10000 [=                                       ]Iteration: 169/10000 [=                                       ]Iteration: 170/10000 [=                                       ]Iteration: 171/10000 [=                                       ]Iteration: 172/10000 [=                                       ]Iteration: 173/10000 [=                                       ]Iteration: 174/10000 [=                                       ]Iteration: 175/10000 [=                                       ]Iteration: 176/10000 [=                                       ]Iteration: 177/10000 [=                                       ]Iteration: 178/10000 [=                                       ]Iteration: 179/10000 [=                                       ]Iteration: 180/10000 [=                                       ]Iteration: 181/10000 [=                                       ]Iteration: 182/10000 [=                                       ]Iteration: 183/10000 [=                                       ]Iteration: 184/10000 [=                                       ]Iteration: 185/10000 [=                                       ]Iteration: 186/10000 [=                                       ]Iteration: 187/10000 [=                                       ]Iteration: 188/10000 [=                                       ]Iteration: 189/10000 [=                                       ]Iteration: 190/10000 [=                                       ]Iteration: 191/10000 [=                                       ]Iteration: 192/10000 [=                                       ]Iteration: 193/10000 [=                                       ]Iteration: 194/10000 [=                                       ]Iteration: 195/10000 [=                                       ]Iteration: 196/10000 [=                                       ]Iteration: 197/10000 [=                                       ]Iteration: 198/10000 [=                                       ]Iteration: 199/10000 [=                                       ]Iteration: 200/10000 [=                                       ]Iteration: 201/10000 [=                                       ]Iteration: 202/10000 [=                                       ]Iteration: 203/10000 [=                                       ]Iteration: 204/10000 [=                                       ]Iteration: 205/10000 [=                                       ]Iteration: 206/10000 [=                                       ]Iteration: 207/10000 [=                                       ]Iteration: 208/10000 [=                                       ]Iteration: 209/10000 [=                                       ]Iteration: 210/10000 [=                                       ]Iteration: 211/10000 [=                                       ]Iteration: 212/10000 [=                                       ]Iteration: 213/10000 [=                                       ]Iteration: 214/10000 [=                                       ]Iteration: 215/10000 [=                                       ]Iteration: 216/10000 [=                                       ]Iteration: 217/10000 [=                                       ]Iteration: 218/10000 [=                                       ]Iteration: 219/10000 [=                                       ]Iteration: 220/10000 [=                                       ]Iteration: 221/10000 [=                                       ]Iteration: 222/10000 [=                                       ]Iteration: 223/10000 [=                                       ]Iteration: 224/10000 [=                                       ]Iteration: 225/10000 [=                                       ]Iteration: 226/10000 [=                                       ]Iteration: 227/10000 [=                                       ]Iteration: 228/10000 [=                                       ]Iteration: 229/10000 [=                                       ]Iteration: 230/10000 [=                                       ]Iteration: 231/10000 [=                                       ]Iteration: 232/10000 [=                                       ]Iteration: 233/10000 [=                                       ]Iteration: 234/10000 [=                                       ]Iteration: 235/10000 [=                                       ]Iteration: 236/10000 [=                                       ]Iteration: 237/10000 [=                                       ]Iteration: 238/10000 [=                                       ]Iteration: 239/10000 [=                                       ]Iteration: 240/10000 [=                                       ]Iteration: 241/10000 [=                                       ]Iteration: 242/10000 [=                                       ]Iteration: 243/10000 [=                                       ]Iteration: 244/10000 [=                                       ]Iteration: 245/10000 [=                                       ]Iteration: 246/10000 [=                                       ]Iteration: 247/10000 [=                                       ]Iteration: 248/10000 [=                                       ]Iteration: 249/10000 [=                                       ]Iteration: 250/10000 [=                                       ]Iteration: 251/10000 [=                                       ]Iteration: 252/10000 [=                                       ]Iteration: 253/10000 [=                                       ]Iteration: 254/10000 [=                                       ]Iteration: 255/10000 [=                                       ]Iteration: 256/10000 [=                                       ]Iteration: 257/10000 [=                                       ]Iteration: 258/10000 [=                                       ]Iteration: 259/10000 [=                                       ]Iteration: 260/10000 [=                                       ]Iteration: 261/10000 [=                                       ]Iteration: 262/10000 [=                                       ]Iteration: 263/10000 [=                                       ]Iteration: 264/10000 [=                                       ]Iteration: 265/10000 [=                                       ]Iteration: 266/10000 [=                                       ]Iteration: 267/10000 [=                                       ]Iteration: 268/10000 [=                                       ]Iteration: 269/10000 [=                                       ]Iteration: 270/10000 [=                                       ]Iteration: 271/10000 [=                                       ]Iteration: 272/10000 [=                                       ]Iteration: 273/10000 [=                                       ]Iteration: 274/10000 [=                                       ]Iteration: 275/10000 [=                                       ]Iteration: 276/10000 [=                                       ]Iteration: 277/10000 [=                                       ]Iteration: 278/10000 [=                                       ]Iteration: 279/10000 [=                                       ]Iteration: 280/10000 [=                                       ]Iteration: 281/10000 [=                                       ]Iteration: 282/10000 [=                                       ]Iteration: 283/10000 [=                                       ]Iteration: 284/10000 [=                                       ]Iteration: 285/10000 [=                                       ]Iteration: 286/10000 [=                                       ]Iteration: 287/10000 [=                                       ]Iteration: 288/10000 [=                                       ]Iteration: 289/10000 [=                                       ]Iteration: 290/10000 [=                                       ]Iteration: 291/10000 [=                                       ]Iteration: 292/10000 [=                                       ]Iteration: 293/10000 [=                                       ]Iteration: 294/10000 [=                                       ]Iteration: 295/10000 [=                                       ]Iteration: 296/10000 [=                                       ]Iteration: 297/10000 [=                                       ]Iteration: 298/10000 [=                                       ]Iteration: 299/10000 [=                                       ]Iteration: 300/10000 [=                                       ]Iteration: 301/10000 [=                                       ]Iteration: 302/10000 [=                                       ]Iteration: 303/10000 [=                                       ]Iteration: 304/10000 [=                                       ]Iteration: 305/10000 [=                                       ]Iteration: 306/10000 [=                                       ]Iteration: 307/10000 [=                                       ]Iteration: 308/10000 [=                                       ]Iteration: 309/10000 [=                                       ]Iteration: 310/10000 [=                                       ]Iteration: 311/10000 [=                                       ]Iteration: 312/10000 [=                                       ]Iteration: 313/10000 [=                                       ]Iteration: 314/10000 [=                                       ]Iteration: 315/10000 [=                                       ]Iteration: 316/10000 [=                                       ]Iteration: 317/10000 [=                                       ]Iteration: 318/10000 [=                                       ]Iteration: 319/10000 [=                                       ]Iteration: 320/10000 [=                                       ]Iteration: 321/10000 [=                                       ]Iteration: 322/10000 [=                                       ]Iteration: 323/10000 [=                                       ]Iteration: 324/10000 [=                                       ]Iteration: 325/10000 [=                                       ]Iteration: 326/10000 [=                                       ]Iteration: 327/10000 [=                                       ]Iteration: 328/10000 [=                                       ]Iteration: 329/10000 [=                                       ]Iteration: 330/10000 [=                                       ]Iteration: 331/10000 [=                                       ]Iteration: 332/10000 [=                                       ]Iteration: 333/10000 [=                                       ]Iteration: 334/10000 [=                                       ]Iteration: 335/10000 [=                                       ]Iteration: 336/10000 [=                                       ]Iteration: 337/10000 [=                                       ]Iteration: 338/10000 [=                                       ]Iteration: 339/10000 [=                                       ]Iteration: 340/10000 [=                                       ]Iteration: 341/10000 [=                                       ]Iteration: 342/10000 [=                                       ]Iteration: 343/10000 [=                                       ]Iteration: 344/10000 [=                                       ]Iteration: 345/10000 [=                                       ]Iteration: 346/10000 [=                                       ]Iteration: 347/10000 [=                                       ]Iteration: 348/10000 [=                                       ]Iteration: 349/10000 [=                                       ]Iteration: 350/10000 [=                                       ]Iteration: 351/10000 [=                                       ]Iteration: 352/10000 [=                                       ]Iteration: 353/10000 [=                                       ]Iteration: 354/10000 [=                                       ]Iteration: 355/10000 [=                                       ]Iteration: 356/10000 [=                                       ]Iteration: 357/10000 [=                                       ]Iteration: 358/10000 [=                                       ]Iteration: 359/10000 [=                                       ]Iteration: 360/10000 [=                                       ]Iteration: 361/10000 [=                                       ]Iteration: 362/10000 [=                                       ]Iteration: 363/10000 [=                                       ]Iteration: 364/10000 [=                                       ]Iteration: 365/10000 [=                                       ]Iteration: 366/10000 [=                                       ]Iteration: 367/10000 [=                                       ]Iteration: 368/10000 [=                                       ]Iteration: 369/10000 [=                                       ]Iteration: 370/10000 [=                                       ]Iteration: 371/10000 [=                                       ]Iteration: 372/10000 [=                                       ]Iteration: 373/10000 [=                                       ]Iteration: 374/10000 [=                                       ]Iteration: 375/10000 [==                                      ]Iteration: 376/10000 [==                                      ]Iteration: 377/10000 [==                                      ]Iteration: 378/10000 [==                                      ]Iteration: 379/10000 [==                                      ]Iteration: 380/10000 [==                                      ]Iteration: 381/10000 [==                                      ]Iteration: 382/10000 [==                                      ]Iteration: 383/10000 [==                                      ]Iteration: 384/10000 [==                                      ]Iteration: 385/10000 [==                                      ]Iteration: 386/10000 [==                                      ]Iteration: 387/10000 [==                                      ]Iteration: 388/10000 [==                                      ]Iteration: 389/10000 [==                                      ]Iteration: 390/10000 [==                                      ]Iteration: 391/10000 [==                                      ]Iteration: 392/10000 [==                                      ]Iteration: 393/10000 [==                                      ]Iteration: 394/10000 [==                                      ]Iteration: 395/10000 [==                                      ]Iteration: 396/10000 [==                                      ]Iteration: 397/10000 [==                                      ]Iteration: 398/10000 [==                                      ]Iteration: 399/10000 [==                                      ]Iteration: 400/10000 [==                                      ]Iteration: 401/10000 [==                                      ]Iteration: 402/10000 [==                                      ]Iteration: 403/10000 [==                                      ]Iteration: 404/10000 [==                                      ]Iteration: 405/10000 [==                                      ]Iteration: 406/10000 [==                                      ]Iteration: 407/10000 [==                                      ]Iteration: 408/10000 [==                                      ]Iteration: 409/10000 [==                                      ]Iteration: 410/10000 [==                                      ]Iteration: 411/10000 [==                                      ]Iteration: 412/10000 [==                                      ]Iteration: 413/10000 [==                                      ]Iteration: 414/10000 [==                                      ]Iteration: 415/10000 [==                                      ]Iteration: 416/10000 [==                                      ]Iteration: 417/10000 [==                                      ]Iteration: 418/10000 [==                                      ]Iteration: 419/10000 [==                                      ]Iteration: 420/10000 [==                                      ]Iteration: 421/10000 [==                                      ]Iteration: 422/10000 [==                                      ]Iteration: 423/10000 [==                                      ]Iteration: 424/10000 [==                                      ]Iteration: 425/10000 [==                                      ]Iteration: 426/10000 [==                                      ]Iteration: 427/10000 [==                                      ]Iteration: 428/10000 [==                                      ]Iteration: 429/10000 [==                                      ]Iteration: 430/10000 [==                                      ]Iteration: 431/10000 [==                                      ]Iteration: 432/10000 [==                                      ]Iteration: 433/10000 [==                                      ]Iteration: 434/10000 [==                                      ]Iteration: 435/10000 [==                                      ]Iteration: 436/10000 [==                                      ]Iteration: 437/10000 [==                                      ]Iteration: 438/10000 [==                                      ]Iteration: 439/10000 [==                                      ]Iteration: 440/10000 [==                                      ]Iteration: 441/10000 [==                                      ]Iteration: 442/10000 [==                                      ]Iteration: 443/10000 [==                                      ]Iteration: 444/10000 [==                                      ]Iteration: 445/10000 [==                                      ]Iteration: 446/10000 [==                                      ]Iteration: 447/10000 [==                                      ]Iteration: 448/10000 [==                                      ]Iteration: 449/10000 [==                                      ]Iteration: 450/10000 [==                                      ]Iteration: 451/10000 [==                                      ]Iteration: 452/10000 [==                                      ]Iteration: 453/10000 [==                                      ]Iteration: 454/10000 [==                                      ]Iteration: 455/10000 [==                                      ]Iteration: 456/10000 [==                                      ]Iteration: 457/10000 [==                                      ]Iteration: 458/10000 [==                                      ]Iteration: 459/10000 [==                                      ]Iteration: 460/10000 [==                                      ]Iteration: 461/10000 [==                                      ]Iteration: 462/10000 [==                                      ]Iteration: 463/10000 [==                                      ]Iteration: 464/10000 [==                                      ]Iteration: 465/10000 [==                                      ]Iteration: 466/10000 [==                                      ]Iteration: 467/10000 [==                                      ]Iteration: 468/10000 [==                                      ]Iteration: 469/10000 [==                                      ]Iteration: 470/10000 [==                                      ]Iteration: 471/10000 [==                                      ]Iteration: 472/10000 [==                                      ]Iteration: 473/10000 [==                                      ]Iteration: 474/10000 [==                                      ]Iteration: 475/10000 [==                                      ]Iteration: 476/10000 [==                                      ]Iteration: 477/10000 [==                                      ]Iteration: 478/10000 [==                                      ]Iteration: 479/10000 [==                                      ]Iteration: 480/10000 [==                                      ]Iteration: 481/10000 [==                                      ]Iteration: 482/10000 [==                                      ]Iteration: 483/10000 [==                                      ]Iteration: 484/10000 [==                                      ]Iteration: 485/10000 [==                                      ]Iteration: 486/10000 [==                                      ]Iteration: 487/10000 [==                                      ]Iteration: 488/10000 [==                                      ]Iteration: 489/10000 [==                                      ]Iteration: 490/10000 [==                                      ]Iteration: 491/10000 [==                                      ]Iteration: 492/10000 [==                                      ]Iteration: 493/10000 [==                                      ]
Early stopping: RMSE fell below the threshold at iteration 493 

> 
> ### Calculation of probabilities for binary sequences
> sequence_probs(Xt = Xt)
binseq
  F00   F01   F10   F11 
0.201 0.299 0.199 0.301 
> 
> 
> 
> cleanEx()
> nameEx("start_matrix")
> ### * start_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: start_matrix
> ### Title: Setup of the start matrix
> ### Aliases: start_matrix
> 
> ### ** Examples
> 
> X0 <- start_matrix(p = c(0.5, 0.6), k = 10000)
> 
> ## check if p can be restored
> apply(X0, 2, mean)
[1] 0.5 0.6
> 
> 
> 
> cleanEx()
> nameEx("summary_RHD")
> ### * summary_RHD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary_RHD
> ### Title: Summary of RHighDim function
> ### Aliases: summary_RHD
> 
> ### ** Examples
> 
> ### Global comparison of a set of 100 genes between two experimental groups.
> X1 = matrix(rnorm(1000, 0, 1), 10, 100)
> X2 = matrix(rnorm(1000, 0.1, 1), 10, 100)
> RHD = RHighDim (X1, X2, paired=FALSE)
> summary_RHD(RHD)
Number of Genes: 10 
Number of Samples in Group 1: 100 
Number of Samples in Group 2: 100 
Samples are Paired: FALSE 

  effect      F    df1     df2      p
1  Group 1.3401 9.9235 1928.69 0.2037
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.188 0.327 6.305 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
