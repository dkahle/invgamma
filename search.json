[{"path":"https://dkahle.github.io/invgamma/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 David Kahle, James Stamey Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dkahle.github.io/invgamma/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Kahle. Author, maintainer, copyright holder. James Stamey. Author, copyright holder.","code":""},{"path":"https://dkahle.github.io/invgamma/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kahle D, Stamey J (2025). invgamma: Inverse Gamma Distribution. R package version 1.1.900, https://github.com/dkahle/invgamma.","code":"@Manual{,   title = {invgamma: The Inverse Gamma Distribution},   author = {David Kahle and James Stamey},   year = {2025},   note = {R package version 1.1.900},   url = {https://github.com/dkahle/invgamma}, }"},{"path":"https://dkahle.github.io/invgamma/index.html","id":"invgamma","dir":"","previous_headings":"","what":"The Inverse Gamma Distribution","title":"The Inverse Gamma Distribution","text":"invgamma implements [dpqr] statistics functions inverse gamma distribution R. ideal using packages since lightweight leverages [dpqr]gamma() line functions maintained CRAN. Please see section parameterizations avoid unintended mistakes!","code":""},{"path":"https://dkahle.github.io/invgamma/index.html","id":"getting-invgamma","dir":"","previous_headings":"","what":"Getting invgamma","title":"The Inverse Gamma Distribution","text":"two ways get invgamma. CRAN version, use development version, use","code":"install.packages(\"invgamma\") # install.packages(\"devtools\") devtools::install_github(\"dkahle/invgamma\")"},{"path":"https://dkahle.github.io/invgamma/index.html","id":"the-dpqrinvgamma-functions","dir":"","previous_headings":"","what":"The [dpqr]invgamma() functions","title":"The Inverse Gamma Distribution","text":"functions invgamma match gamma distribution provided stats package. Namely, uses density f(x) = (b^/ Gamma()) x^-(+1) e^(-b/x), = shape b = rate. PDF (f(x) ) can evaluated dinvgamma() function:  CDF can evaluated pinvgamma() function: quantile function can evaluated qinvgamma(): random number generation can performed rinvgamma(): rinvgamma() can used obtain Monte Carlo estimate probability given pinvgamma() : Moreover, can check consistency correctness implementation   inferential alternative, can use KS test:","code":"library(\"invgamma\") x <- seq(0, 5, .01) shape <- 7; rate <- 10 plot(x, dinvgamma(x, shape, rate), type = \"l\") f <- function(x) dinvgamma(x, shape, rate) q <- 2 integrate(f, 0, q) #  0.7621835 with absolute error < 7.3e-05 (p <- pinvgamma(q, shape, rate)) #  [1] 0.7621835 qinvgamma(p, shape, rate) # = q #  [1] 2 set.seed(1234) rinvgamma(5, shape, rate) #  [1] 2.640734 1.364965 1.342591 2.095975 1.273201 n <- 1e5 draws <- rinvgamma(n, shape, rate) mean(draws <= q) #  [1] 0.76401 plot(density(draws), xlim = c(0,5)) curve(f(x), col = \"red\", add = TRUE) qqplot(   ppoints(n) |> qinvgamma(shape, rate),   draws,   main = \"QQ plot for inverse gamma draws\" ) abline(0, 1, col = \"red\") ks.test(   draws,    function(p) pinvgamma(p, shape, rate) ) #   #   Asymptotic one-sample Kolmogorov-Smirnov test #   #  data:  draws #  D = 0.0029822, p-value = 0.3361 #  alternative hypothesis: two-sided"},{"path":"https://dkahle.github.io/invgamma/index.html","id":"the-dpqrinvchisq-and-dpqrinvexp-functions","dir":"","previous_headings":"","what":"The [dpqr]invchisq() and [dpqr]invexp() functions","title":"The Inverse Gamma Distribution","text":"gamma distribution subsumes chi-squared exponential distributions, makes sense include *invchisq() *invexp() functions invgamma. implementations, however, wrap *chisq() *exp(), *invgamma().","code":""},{"path":"https://dkahle.github.io/invgamma/index.html","id":"a-note-on-parameterizations","dir":"","previous_headings":"","what":"A note on parameterizations","title":"The Inverse Gamma Distribution","text":"detailed , parameterizations functions package cue corresponding non-inverse distributions stats. commonly causes confusion , example, parameter rate dinvgamma() rate parameter inverse gamma distribution. ! rate parameter corresponding gamma distribution. Please take care distinction.","code":""},{"path":"https://dkahle.github.io/invgamma/index.html","id":"a-note-on-numerics","dir":"","previous_headings":"","what":"A note on numerics","title":"The Inverse Gamma Distribution","text":"invgamma intended lightweight simple, largely self-maintaining package implementing inverse gamma, inverse chi-square, inverse exponential distributions. uses transformation theorem cases. One challenges using naive implementations distributions numerics may work well. Arithmetic computer arithmetic theory, kind meet math classes, consequence best computer implementations mathematical facts/algorithms need tailored specific cases hand. January 2023 little poking around rinvgamma() found performs poorly shape parameter less .001 . resulting distributions heavy-tailed, draws distributions returned rinvgamma() large get rounded either large numbers (floating point representation numbers provide many numbers) infinity. Example:","code":"rinvgamma(10, shape = 3, rate = 7) #   [1] 3.252524 4.540151 2.352486 3.012428 1.679808 2.265310 4.428625 1.836283 #   [9] 2.276005 1.746593"},{"path":[]},{"path":"https://dkahle.github.io/invgamma/index.html","id":"rinvgamma","dir":"","previous_headings":"A note on numerics > KS tests for sampling accuracy","what":"rinvgamma()","title":"The Inverse Gamma Distribution","text":"detailed Monte Carlo investigation checks sampler quality using Kolmogorov-Smirnov test. First, write basic Monte Carlo test sampler works generating large (n = 1e6) sample draws inverse gamma distribution given shape rate: function returns pp-value associated KS test, “small” values suggest departure null hypothesis distribution corresponding inverse gamma distribution: sampler performing poorly. null hypothesis, pp-value approximate uniform distribution, fact can found advanced mathematical statistics books, expect proportion small regardless. want see behavior sampler rinvgamma() across wide array parameter values. , use range parameter values running small (10−410^-4) large (10410^4): ’s experiment’s design space looks like:  Now, run test point design space parallel. (Note: ’ve suppressed warnings relevant.) visualize distribution pp-values space, binning colors .05 highlight rejections tests 5% level:  sampler working correctly, pp-values approximately IID uniform(0,1), expect 5% points purple, 5% uniformly distributed whole space patterns. Obviously, ’s case: shape parameter small, test always rejecting. Clearly, shape small, sampler work well. investigations reveal , easy rule, sampler can considered unreliable shape values less 0.01. consequence, rinvgamma() issues warning circumstances. (warning suppressed computations.)","code":"test_invgamma <- function(shape, rate, n = 1e5) {   draws <- rinvgamma(n, shape, rate)   ks.test(draws, function(p) pinvgamma(p, shape, rate))$p.value }  test_invgamma(3, 7) #  [1] 0.3464601 # load tidyverse and related library(\"tidyverse\"); library(\"patchwork\"); library(\"scales\", warn.conflicts = FALSE) theme_set(theme_minimal()); theme_update(panel.grid.minor = element_blank())  # load furrr for parallel computing library(\"furrr\"); furrr_options(seed = TRUE) #  <furrr_options> plan(multisession(workers = parallelly::availableCores()))  # set parameter values to test n_grid <- 51 param_vals <- 10^seq(-4, 4, length.out = n_grid) (param_grid <- expand_grid(\"shape\" = param_vals, \"rate\" = param_vals)) #  # A tibble: 2,601 × 2 #      shape     rate #      <dbl>    <dbl> #   1 0.0001 0.0001   #   2 0.0001 0.000145 #   3 0.0001 0.000209 #   4 0.0001 0.000302 #   5 0.0001 0.000437 #   6 0.0001 0.000631 #   7 0.0001 0.000912 #   8 0.0001 0.00132  #   9 0.0001 0.00191  #  10 0.0001 0.00275  #  # ℹ 2,591 more rows # make axes labeller fmt <- scales::math_format(10^.x)  # make plot ggplot(param_grid, aes(shape, rate)) +   geom_point() +   scale_x_log10(expression(alpha), n.breaks = 10, labels = fmt(-5:5)) +   scale_y_log10(expression(lambda), n.breaks = 10, labels = fmt(-5:5)) +   labs(\"title\" = \"Parameter Values at Which to Test `rinvgamma()`\") +   coord_equal() param_grid <- param_grid |>    mutate(p_val = future_map2_dbl(shape, rate, test_invgamma)) ggplot(param_grid, aes(shape, rate, color = p_val)) +   geom_point() +   scale_x_log10(expression(alpha), n.breaks = 10, labels = fmt(-5:5)) +   scale_y_log10(expression(lambda), n.breaks = 10, labels = fmt(-5:5)) +   scale_color_binned(breaks = c(0, .05, 1)) +   labs(color = \"p value\") +   labs(\"title\" = \"KS GoF Test of Draws for Different Parameter Values\") +   coord_equal()"},{"path":"https://dkahle.github.io/invgamma/index.html","id":"rinvchisq-and-rinvexp","dir":"","previous_headings":"A note on numerics > KS tests for sampling accuracy","what":"rinvchisq() and rinvexp()","title":"The Inverse Gamma Distribution","text":"Similar investigations using inverse chi-squared inverse exponential reveal rinvchisq() trusted df <= .01 ncp <= 10 rinvexp() trustworthy values. illustration inverse chi-squared:  illustration inverse exponential:","code":"test_rinvchisq <- function(df, ncp, n = 1e5) {   draws <- rinvchisq(n, df, ncp)   ks.test(draws, function(p) pinvchisq(p, df, ncp))$p.value }  expand_grid(\"df\" = param_vals, \"ncp\" = param_vals) |>    mutate(\"p_val\" = future_map2_dbl(df, ncp, test_rinvchisq)) |>    ggplot(aes(df, ncp, color = p_val)) +     geom_point() +     scale_x_log10(expression(nu), n.breaks = 10, labels = fmt(-5:5)) +     scale_y_log10(\"ncp\", n.breaks = 10, labels = fmt(-5:5)) +     scale_color_binned(breaks = c(0, .05, 1)) +     labs(color = \"p value\") +     coord_equal() test_rinvexp <- function(rate, n = 1e5) {   draws <- rinvexp(n, rate = rate)   ks.test(draws, function(p) pinvexp(p, rate))$p.value }  tibble(\"rate\" = 10^seq(-4, 4, length.out = 2*n_grid)) |>    mutate(\"p_val\" = future_map_dbl(rate, test_rinvexp)) |>    ggplot(aes(rate, 0, color = p_val)) +     geom_point() +     scale_x_log10(expression(lambda), n.breaks = 10, labels = fmt(-5:5)) +     scale_color_binned(breaks = c(0, .05, 1), guide = FALSE) +     theme(axis.text.y = element_blank(), axis.title.y = element_blank(),           panel.grid.major.y = element_blank()) +     coord_equal()"},{"path":"https://dkahle.github.io/invgamma/reference/invchisq.html","id":null,"dir":"Reference","previous_headings":"","what":"The Inverse (non-central) Chi-Squared Distribution — invchisq","title":"The Inverse (non-central) Chi-Squared Distribution — invchisq","text":"Density, distribution function, quantile function random generation inverse chi-squared distribution.","code":""},{"path":"https://dkahle.github.io/invgamma/reference/invchisq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Inverse (non-central) Chi-Squared Distribution — invchisq","text":"","code":"dinvchisq(x, df, ncp = 0, log = FALSE)  pinvchisq(q, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)  qinvchisq(p, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)  rinvchisq(n, df, ncp = 0)"},{"path":"https://dkahle.github.io/invgamma/reference/invchisq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Inverse (non-central) Chi-Squared Distribution — invchisq","text":"x, q vector quantiles. df degrees freedom (non-negative, can non-integer). ncp non-centrality parameter (non-negative). log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities \\(P[X \\leq x]\\); FALSE \\(P[X > x]\\). p vector probabilities. n number observations. length(n) > 1, length taken number required.","code":""},{"path":"https://dkahle.github.io/invgamma/reference/invchisq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Inverse (non-central) Chi-Squared Distribution — invchisq","text":"functions (d/p/q/r)invchisq() simply wrap standard (d/p/q/r)chisq() R implementation, look , say, stats::dchisq() details.","code":""},{"path":[]},{"path":"https://dkahle.github.io/invgamma/reference/invchisq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Inverse (non-central) Chi-Squared Distribution — invchisq","text":"","code":"s <- seq(0, 3, .01) plot(s, dinvchisq(s, 3), type = 'l')   f <- function(x) dinvchisq(x, 3) q <- 2 integrate(f, 0, q) #> 0.9188914 with absolute error < 9.4e-07 (p <- pinvchisq(q, 3)) #> [1] 0.9188914 qinvchisq(p, 3) # = q #> [1] 2 mean(rinvchisq(1e5, 3) <= q) #> [1] 0.91922     f <- function(x) dinvchisq(x, 3, ncp = 2) q <- 1.5 integrate(f, 0, q) #> 0.950349 with absolute error < 3.8e-06 (p <- pinvchisq(q, 3, ncp = 2)) #> [1] 0.950349 qinvchisq(p, 3, ncp = 2) # = q #> [1] 1.5 mean(rinvchisq(1e7, 3, ncp = 2) <= q) #> [1] 0.9502992"},{"path":"https://dkahle.github.io/invgamma/reference/invexp.html","id":null,"dir":"Reference","previous_headings":"","what":"The Inverse Exponential Distribution — invexp","title":"The Inverse Exponential Distribution — invexp","text":"Density, distribution function, quantile function random generation inverse exponential distribution.","code":""},{"path":"https://dkahle.github.io/invgamma/reference/invexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Inverse Exponential Distribution — invexp","text":"","code":"dinvexp(x, rate = 1, log = FALSE)  pinvexp(q, rate = 1, lower.tail = TRUE, log.p = FALSE)  qinvexp(p, rate = 1, lower.tail = TRUE, log.p = FALSE)  rinvexp(n, rate = 1)"},{"path":"https://dkahle.github.io/invgamma/reference/invexp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Inverse Exponential Distribution — invexp","text":"x, q vector quantiles. rate degrees freedom (non-negative, can non-integer). log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities \\(P[X \\leq x]\\); FALSE \\(P[X > x]\\). p vector probabilities. n number observations. length(n) > 1, length taken number required.","code":""},{"path":"https://dkahle.github.io/invgamma/reference/invexp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Inverse Exponential Distribution — invexp","text":"functions (d/p/q/r)invexp() simply wrap standard (d/p/q/r)exp() R implementation, look , say, stats::dexp() details.","code":""},{"path":[]},{"path":"https://dkahle.github.io/invgamma/reference/invexp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Inverse Exponential Distribution — invexp","text":"","code":"s <- seq(0, 10, .01) plot(s, dinvexp(s, 2), type = 'l')   f <- function(x) dinvexp(x, 2) q <- 3 integrate(f, 0, q) #> 0.5134171 with absolute error < 6.7e-06 (p <- pinvexp(q, 2)) #> [1] 0.5134171 qinvexp(p, 2) # = q #> [1] 3 mean(rinvexp(1e5, 2) <= q) #> [1] 0.51291  pinvgamma(q, 1, 2) #> [1] 0.5134171"},{"path":"https://dkahle.github.io/invgamma/reference/invgamma.html","id":null,"dir":"Reference","previous_headings":"","what":"The Inverse Gamma Distribution — invgamma","title":"The Inverse Gamma Distribution — invgamma","text":"Density, distribution function, quantile function random generation inverse gamma distribution.","code":""},{"path":"https://dkahle.github.io/invgamma/reference/invgamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Inverse Gamma Distribution — invgamma","text":"","code":"dinvgamma(x, shape, rate = 1, scale = 1/rate, log = FALSE)  pinvgamma(q, shape, rate = 1, scale = 1/rate, lower.tail = TRUE, log.p = FALSE)  qinvgamma(p, shape, rate = 1, scale = 1/rate, lower.tail = TRUE, log.p = FALSE)  rinvgamma(n, shape, rate = 1, scale = 1/rate)"},{"path":"https://dkahle.github.io/invgamma/reference/invgamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Inverse Gamma Distribution — invgamma","text":"x, q vector quantiles. shape, rate, scale shape, rate, scale parameters corresponding gamma distribution. particular, rate scale rate scale inverse gamma distribution, gamma distribution. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities \\(P[X \\leq x]\\); FALSE \\(P[X > x]\\). p vector probabilities. n number observations. length(n) > 1, length taken number required.","code":""},{"path":"https://dkahle.github.io/invgamma/reference/invgamma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Inverse Gamma Distribution — invgamma","text":"inverse gamma distribution parameters shape rate density $$f(x) = \\frac{rate^{shape}}{\\Gamma(shape)} x^{-1-shape} e^{-rate/x}$$ inverse standard gamma parameterization R. \\(X \\sim InvGamma(shape, rate)\\), $$E[X] = \\frac{rate}{shape-1}$$ \\(shape > 1\\) $$Var(X) = \\frac{rate^2}{(shape - 1)^2(shape - 2)}$$ \\(shape > 2\\). functions (d/p/q/r)invgamma() simply wrap standard (d/p/q/r)gamma() R implementation, look , say, stats::dgamma() details.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://dkahle.github.io/invgamma/news/index.html","id":"new-features-1-2","dir":"Changelog","previous_headings":"","what":"New features","title":"invgamma 1.2","text":"invgamma updated README containing simulation check rinvgamma().","code":""},{"path":"https://dkahle.github.io/invgamma/news/index.html","id":"changes-1-2","dir":"Changelog","previous_headings":"","what":"Changes","title":"invgamma 1.2","text":"rinvgamma() now errors shape parameter less 0.01, unreliable . invgamma now cautions users parameterizations used (d/p/q/r)invgamma() functions. invgamma now MIT license.","code":""},{"path":"https://dkahle.github.io/invgamma/news/index.html","id":"invgamma-11","dir":"Changelog","previous_headings":"","what":"invgamma 1.1","title":"invgamma 1.1","text":"CRAN release: 2017-05-07","code":""},{"path":"https://dkahle.github.io/invgamma/news/index.html","id":"new-features-1-1","dir":"Changelog","previous_headings":"","what":"New features","title":"invgamma 1.1","text":"(d/p/q/r)invgamma() now defaults rate parameter 1, like (d/p/q/r)gamma().","code":""},{"path":"https://dkahle.github.io/invgamma/news/index.html","id":"fixes-1-1","dir":"Changelog","previous_headings":"","what":"Fixes","title":"invgamma 1.1","text":"README images moved figures/ tools/","code":""},{"path":"https://dkahle.github.io/invgamma/news/index.html","id":"invgamma-10","dir":"Changelog","previous_headings":"","what":"invgamma 1.0","title":"invgamma 1.0","text":"CRAN release: 2016-07-02","code":""},{"path":"https://dkahle.github.io/invgamma/news/index.html","id":"new-features-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"invgamma 1.0","text":"(d/p/q/r)invchisq() (d/p/q/r)invexp() now included, tied base R counterparts.","code":""},{"path":"https://dkahle.github.io/invgamma/news/index.html","id":"invgamma-10-1","dir":"Changelog","previous_headings":"","what":"invgamma 1.0","title":"invgamma 1.0","text":"CRAN release: 2016-07-02","code":""},{"path":"https://dkahle.github.io/invgamma/news/index.html","id":"new-features-1-0-1","dir":"Changelog","previous_headings":"","what":"New features","title":"invgamma 1.0","text":"dinvgamma() now tied dgamma() base, instead custom implementation density.","code":""}]
